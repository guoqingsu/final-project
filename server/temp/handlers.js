"use strict";
// on root directory, install dotenv: yarn add dotenv
// under server install uuid: yarn add uuid
// yarn start
const { MongoClient } = require("mongodb");
require ("dotenv").config();
const { MONGO_URI, DATABASE_NAME } = process.env;

const options = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
};

// when running the code batchImport.js: mongodb will automatically add _id to each reservation. But this _id can't be used for find()
// since original Marty doc has id, so mongodb will also automatically add id to each doc when insert. This id can be used for find()
// if original Marty doc has NO id, then mongodb won't add id for inserted docs. 
// So we have to use const { v4: uuidv4 } = require("uuid"); for each doc inserted for find() purpose 

// use this package to generate unique ids: https://www.npmjs.com/package/uuid
// yarn add uuid 
const { v4: uuidv4 } = require("uuid");

// use this data. Changes will persist until the server (backend) restarts.
//const { flights, reservations } = require("./data");

const sendMessage = (res, status, data, message="") => {
    return res.status(status).json({ status:status, data:data , message:message })
}

// get all flights
// Insomnia: GET http://localhost:8000/api/get-flights
const getUsers = async (req, res) => {
  try {
    const client = new MongoClient(MONGO_URI, options);
    await client.connect();
    console.log("connected!");

    const db = client.db(DATABASE_NAME);
    //find() returns the cursor of Result Set of a query (just many objects)
    const result = await db.collection("users").find().toArray(); 

    result.length > 0
        ? sendMessage(res, 200, result, "get users, success")
        : sendMessage(res, 404, null, "users not found")
    client.close();
    console.log("disconnected!");
  }catch (err) {
        console.log(err.stack);
  }
};

const getUserByLogin = async (req, res) => {
  try {
    const userEmail = req.body.email;
    const userpassWord = req.body.passWord;

    const client = new MongoClient(MONGO_URI, options);
    await client.connect();
    console.log("connected!");
    const db = client.db(DATABASE_NAME);

    const result = await db.collection("users").findOne({email: userEmail});
    const result2 = await db.collection("users").findOne({passWord: userpassWord});

    result
        ? ( result2
              ? sendMessage(res, 200, result, "login, success")
              : sendMessage(res, 401, null, "login email or password not correct")
          )
        : sendMessage(res, 402, null, "user not found")

    client.close();
  }catch (err) {
    console.log(err.stack);
  }
};

// // get all reservations
// const getReservations = async (req, res) => {
//   try {
//     const client = new MongoClient(MONGO_URI, options);
//     await client.connect();
//     console.log("connected!");

//     const db = client.db(DATABASE_NAME);
//     const result = await db.collection("reservations").find().toArray();
//     result.length > 0
//         ? sendMessage(res, 200, result, "get reservations, success")
//         : sendMessage(res, 404, null, "reservations not found")

//     client.close();
//   }catch (err) {
//     console.log(err.stack);
//   }
// };

// // get single reservation by id
// // I tested by _id that generated by mongodb, not working, os we've to use uuidv4
// const getSingleReservation = async (req, res) => {
//   try {
//     // 2 ways to get data from req.params: 
//     // const { id } = req.params will get the value only: 6fa43375-ee41-4020-bfda-c0de4884c263
//     // const id = req.params will get an object { id: "6fa43375-ee41-4020-bfda-c0de4884c263" }
//     // another thing is getting data from req.body:  const {flight, seat} = req.body;

//     // here the param name "id" MUST be the same word as the "id" in server.js 
//     // and the "id" in server.js MUST be the same word as the "id" in reservervations collection in database
//     const { id } = req.params; 
//     console.log("aaaaaaaaaa", id);
//     const client = new MongoClient(MONGO_URI, options);
//     await client.connect();
//     const db = client.db(DATABASE_NAME);
    
//       const result = await db.collection("reservations").findOne({ id: id });

//       result
//       ? res.status(200).json({ status: 200, result, message: "get single reservation, success" })
//       : res.status(400).json({ status: 400, message: "reservation not found" });

//       client.close();
   
//    } catch (err) {
//       console.log(err.stack);
//     }
// };

const addUser = async (req, res) => {
  try {
    const newUser = req.body;
    const newUserObj = {
      id: uuidv4(),
      ...req.body,
    };

    const client = new MongoClient(MONGO_URI, options);
    await client.connect();
    console.log("connected!");

    const db = client.db(DATABASE_NAME);

    const checkUser = await db.collection("users").findOne({email: newUserObj.email});

    if(!checkUser){
      const result = await db.collection("users").insertOne(newUserObj);
      result
        ? sendMessage(res, 200, result, "add user success")
        : sendMessage(res, 401, null, "add user failed")
    }
    else{

      sendMessage(res, 400, null, "the user exists");
    }

    client.close();
    console.log("disconnected");
  }catch (err) {
    console.log(err.stack);
  }
};

// // still has the reservation, just update info
// const updateReservation = async (req, res) => {
//     try { // below id is for reservation
//     const {oldSeat, newSeat, flight, id, givenName, surname, email} = req.body;
//     console.log(newSeat)
//     const client = new MongoClient(MONGO_URI, options);
//         await client.connect();
//         console.log("connected!");
//         const db = client.db(DATABASE_NAME);

//         const oldSeatCancel = await db.collection("flights").updateOne(
//           { flight: flight, "seats.id": oldSeat}, // seats is array !!!!!!!!! "seats.id" is strange
//           { $set: { "seats.$.isAvailable": true }}
//       );

//       const newSeatBook = await db.collection("flights").updateOne(
//           { flight: flight, "seats.id": newSeat},
//           { $set: { "seats.$.isAvailable": false }}
//       )

//       const customerChange = await db.collection("reservations").updateOne(
//           { id },
//           { $set: { seat: newSeat, givenName, surname, email}},
//       )

//       if (
//           oldSeatCancel.modifiedCount > 0 &&
//           newSeatBook.modifiedCount > 0 &&
//           customerChange.modifiedCount > 0
//           ){
//             sendMessage(res, 200, "reservation successfully updated")
//       } else {
//               sendMessage(res, 400, null, "reservation could not be updated at this time")
//       }
//         } catch (err) {
//             console.log(err.stack);
//           }
// };

// // delete reservation by id
// const deleteReservation = async(req, res) => {   
//   try { 
//      const {flight, id, seat} = req.body;
//      console.log(flight, id, seat)
     
//      if (JSON.stringify(req.body).length>2){
//          const client = new MongoClient(MONGO_URI, options);
//          await client.connect();
//          console.log("connected!");
//          const db = client.db(DATABASE_NAME);
         
//          const result = await db.collection("reservations").deleteOne({"id":id});
//          const cancelSeat = await db.collection("flights").updateOne(
//              { flight: flight, "seats.id": seat},
//              { $set: { "seats.$.isAvailable": true }}
//          );

//          console.log(result);
//          console.log(cancelSeat);

//          result
//              ? sendMessage(res, 200, result, "delete single reservation, success")
//              : sendMessage(res, 404, null, "reservation could not be deleted")
             
//          client.close();
//      } else {
//          sendMessage(res, 403, null, "required field not filled")
//      }
//    } catch (err) {
//      console.log(err.stack);
//    }
//  };

module.exports = {
    getUsers,
    addUser,
    getUserByLogin,
};